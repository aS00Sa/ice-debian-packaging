--- a/java/src/IceGridGUI/Coordinator.java
+++ b/java/src/IceGridGUI/Coordinator.java
@@ -1266,8 +1266,8 @@
 
     void
     login(final SessionKeeper sessionKeeper,
-          final SessionKeeper.ConnectionInfo info, 
-          final JDialog parent, 
+          final SessionKeeper.ConnectionInfo info,
+          final JDialog parent,
           final Cursor oldCursor,
           Ice.LongHolder keepAlivePeriodHolder)
     {
@@ -1296,7 +1296,7 @@
             }
             catch(java.lang.Exception e)
             {
-                JOptionPane.showMessageDialog(parent, e.toString(), "Failed to access data directory", 
+                JOptionPane.showMessageDialog(parent, e.toString(), "Failed to access data directory",
                                               JOptionPane.ERROR_MESSAGE);
                 parent.setCursor(oldCursor);
                 return;
@@ -1388,12 +1388,12 @@
                     return _decision;
                 }
 
-                public void 
+                public void
                 run()
                 {
                     try
                     {
-                        UntrustedCertificateDialog dialog = new UntrustedCertificateDialog(parent, _info, _validDate, 
+                        UntrustedCertificateDialog dialog = new UntrustedCertificateDialog(parent, _info, _validDate,
                                                                                            _validAlternateName,
                                                                                            _trustedCA);
                         Utils.addEscapeListener(dialog);
@@ -1433,7 +1433,7 @@
 
                 //
                 // Compare the server certificate with a previous accepted certificate if
-                // any, the trasient certificate is reset by Coordinator.login, and is only 
+                // any, the trasient certificate is reset by Coordinator.login, and is only
                 // ussefull in case the connection is retry, because a timeout or ACM closed
                 // it while the certificate verifier was waiting for the user decission.
                 //
@@ -1596,13 +1596,13 @@
                     }
                     return false;
                 }
-            
+
                 if(validDate && validAlternateName && trustedCA)
                 {
                     return true;
                 }
-            
-                TrustDecision decision = new AcceptInvalidCertDialog().show(info, validDate, validAlternateName, 
+
+                TrustDecision decision = new AcceptInvalidCertDialog().show(info, validDate, validAlternateName,
                                                                             trustedCA);
 
                 if(decision == TrustDecision.YesThisTime)
@@ -1616,7 +1616,7 @@
                     {
                         String CN = "";
                         LdapName dn = new LdapName(cert.getSubjectX500Principal().getName());
-                        for(Rdn rdn: dn.getRdns()) 
+                        for(Rdn rdn: dn.getRdns())
                         {
                             if(rdn.getType().toUpperCase().equals("CN"))
                             {
@@ -1625,7 +1625,7 @@
                             }
                         }
                         _trustedServerKeyStore.setCertificateEntry(CN, info.nativeCerts[0]);
-                        _trustedServerKeyStore.store(new FileOutputStream(getDataDirectory() + "/ServerCerts.jks"), 
+                        _trustedServerKeyStore.store(new FileOutputStream(getDataDirectory() + "/ServerCerts.jks"),
                                                      new char[]{});
                         sessionKeeper.certificateManager(parent).load();
                         return true;
@@ -1658,7 +1658,7 @@
                 }
                 return false;
             }
-            
+
             private KeyStore _trustedCaKeyStore;
             private KeyStore _trustedServerKeyStore;
         }
@@ -1678,7 +1678,7 @@
                         {
                             public void run()
                             {
-                                JOptionPane.showMessageDialog(parent, ex.toString(), 
+                                JOptionPane.showMessageDialog(parent, ex.toString(),
                                                               "Error creating certificate verifier",
                                                               JOptionPane.ERROR_MESSAGE);
                                 parent.setCursor(oldCursor);
@@ -1786,7 +1786,7 @@
             {
                 str += ":" + info.getEndpoint();
             }
-    
+
             final String proxyStr = str;
             final ConnectionCallback cb = new ConnectionCallback();
             new Thread(new Runnable()
@@ -1803,7 +1803,7 @@
                             //
                             _communicator.setDefaultRouter(router);
 
-                            
+
                             Glacier2.SessionPrx s;
                             if(info.getAuth() == SessionKeeper.AuthType.X509CertificateAuthType)
                             {
@@ -1835,7 +1835,7 @@
                             {
                                 router = Glacier2.RouterPrxHelper.uncheckedCast(router.ice_preferSecure(true));
 
-                                s = router.createSession(info.getUsername(), info.getPassword() != null ? 
+                                s = router.createSession(info.getUsername(), info.getPassword() != null ?
                                                                                 new String(info.getPassword()) : "");
 
                                 if(s == null)
@@ -1877,7 +1877,7 @@
                                         String msg = e.reason;
                                         if(msg.length() == 0)
                                         {
-                                            msg = info.getAuth() == SessionKeeper.AuthType.X509CertificateAuthType ? 
+                                            msg = info.getAuth() == SessionKeeper.AuthType.X509CertificateAuthType ?
                                                                  "Invalid credentials" : "Invalid username/password";
                                         }
                                         if(info.getAuth() == SessionKeeper.AuthType.X509CertificateAuthType)
@@ -1964,7 +1964,7 @@
                 {
                     return _locator;
                 }
-    
+
                 private IceGrid.LocatorPrx _locator;
                 private RegistryPrx _registry;
                 private RegistryPrx _currentRegistry;
@@ -2064,13 +2064,13 @@
                             }
 
                             cb.setRegistry(cb.getCurrentRegistry());
-                            if(info.getConnectToMaster() && 
+                            if(info.getConnectToMaster() &&
                                !cb.getCurrentRegistry().ice_getIdentity().name.equals("Registry"))
                             {
                                 Ice.Identity masterRegistryId = new Ice.Identity();
                                 masterRegistryId.category = info.getInstanceName();
                                 masterRegistryId.name = "Registry";
-                
+
                                 cb.setRegistry(RegistryPrxHelper.
                                     uncheckedCast(_communicator.stringToProxy(
                                                     "\"" + _communicator.identityToString(masterRegistryId) + "\"")));
@@ -2084,7 +2084,7 @@
                             if(cb.getRegistry().ice_getIdentity().equals(cb.getCurrentRegistry().ice_getIdentity()))
                             {
                                 Ice.Properties properties = _communicator.getProperties();
-                                properties.setProperty("CollocInternal.AdapterId", 
+                                properties.setProperty("CollocInternal.AdapterId",
                                                        java.util.UUID.randomUUID().toString());
                                 Ice.ObjectAdapter colloc = _communicator.createObjectAdapter("CollocInternal");
                                 colloc.setLocator(null);
@@ -2109,7 +2109,7 @@
                                         cb.setRegistry(RegistryPrxHelper.uncheckedCast(
                                                                             cb.getRegistry().ice_preferSecure(true)));
 
-                                        cb.setSession(cb.getRegistry().createAdminSession(info.getUsername(), 
+                                        cb.setSession(cb.getRegistry().createAdminSession(info.getUsername(),
                                                     info.getPassword() != null ? new String(info.getPassword()) : ""));
                                         assert cb.getSession() != null;
                                     }
@@ -2124,7 +2124,7 @@
                                                 String msg = e.reason;
                                                 if(msg.length() == 0)
                                                 {
-                                                    msg = info.getAuth() == SessionKeeper.AuthType.X509CertificateAuthType ? 
+                                                    msg = info.getAuth() == SessionKeeper.AuthType.X509CertificateAuthType ?
                                                                          "Invalid credentials" : "Invalid username/password";
                                                 }
 
@@ -2181,7 +2181,7 @@
                                                     }
                                                     else
                                                     {
-                                                        cb.loginFailed();                                                        
+                                                        cb.loginFailed();
                                                     }
                                                 }
                                             });
@@ -2714,7 +2714,7 @@
             {
                 public void actionPerformed(ActionEvent e)
                 {
-                    createGraphView();
+                    // createGraphView();
                 }
             };
         _newGraph.setEnabled(false);
@@ -2900,7 +2900,7 @@
 
         _saveToRegistryWithoutRestart = new AbstractAction("Save to Registry (No server restart)")
             {
-                public void actionPerformed(ActionEvent e) 
+                public void actionPerformed(ActionEvent e)
                 {
                     getCurrentTab().saveToRegistry(false);
                 }
@@ -3269,7 +3269,7 @@
             pos = Ice.Util.stringVersion().lastIndexOf('.');
             assert(pos != -1);
         }
-        
+
         String version = Ice.Util.stringVersion().substring(0, pos);
         BareBonesBrowserLaunch.openURL("http://doc.zeroc.com/display/Rel/Ice+" + version + "+IceGrid+Admin");
     }
@@ -3487,7 +3487,7 @@
         _newServerMenu.setEnabled(false);
         _newServiceMenu.setEnabled(false);
         _newTemplateMenu.setEnabled(false);
-        
+
         _appMenu.setEnabled(true);
 
         _metricsViewMenu.setEnabled(availableActions[IceGridGUI.LiveDeployment.TreeNode.ENABLE_METRICS_VIEW] ||
@@ -3626,7 +3626,7 @@
             }
             else
             {
-                _dataDir = System.getProperty("user.home") + File.separator + ".ZeroC" + File.separator + "IceGrid Admin" + 
+                _dataDir = System.getProperty("user.home") + File.separator + ".ZeroC" + File.separator + "IceGrid Admin" +
                                                                                             File.separator + "KeyStore";
             }
         }
@@ -3657,8 +3657,8 @@
     static class UntrustedCertificateDialog extends JDialog
     {
         public UntrustedCertificateDialog(java.awt.Window owner, IceSSL.NativeConnectionInfo info, boolean validDate,
-                                          boolean validAlternateName, boolean trustedCA) 
-                                            throws java.security.GeneralSecurityException, java.io.IOException, 
+                                          boolean validAlternateName, boolean trustedCA)
+                                            throws java.security.GeneralSecurityException, java.io.IOException,
                                                    javax.naming.InvalidNameException
         {
             super(owner, "Connection Security Warning - IceGrid Admin");
@@ -3673,7 +3673,7 @@
                 builder.border(Borders.DIALOG);
                 builder.rowGroupingEnabled(true);
                 builder.lineGapSize(LayoutStyle.getCurrent().getLinePad());
-                
+
                 builder.append(new JLabel("The validation of the SSL Certificate provided by the server has failed"));
 
                 if(validDate)
@@ -3692,18 +3692,18 @@
                 }
                 else
                 {
-                    builder.append(new JLabel("The subject alternate name doesn't match the connection remote address.", 
+                    builder.append(new JLabel("The subject alternate name doesn't match the connection remote address.",
                                    _warnIcon, SwingConstants.LEADING));
                 }
 
                 if(trustedCA)
                 {
-                    builder.append(new JLabel("The server certificate is signed by a trusted CA.", _infoIcon, 
+                    builder.append(new JLabel("The server certificate is signed by a trusted CA.", _infoIcon,
                                    SwingConstants.LEADING));
                 }
                 else
                 {
-                    builder.append(new JLabel("The server certificate is not signed by a trusted CA.", _warnIcon, 
+                    builder.append(new JLabel("The server certificate is not signed by a trusted CA.", _warnIcon,
                                    SwingConstants.LEADING));
                 }
                 contentPane.add(builder.getPanel());
@@ -3742,7 +3742,7 @@
                     }
                 });
             getRootPane().setDefaultButton(noButton);
-            JComponent buttonBar = new ButtonBarBuilder().addGlue().addButton(yesAlwaysButton, yesButton, 
+            JComponent buttonBar = new ButtonBarBuilder().addGlue().addButton(yesAlwaysButton, yesButton,
                                                                               noButton).build();
             buttonBar.setBorder(Borders.DIALOG);
             contentPane.add(buttonBar);
@@ -3761,7 +3761,7 @@
         private TrustDecision _decision = TrustDecision.No;
         private static Icon _infoIcon = new ImageIcon(Utils.iconToImage(UIManager.getIcon("OptionPane.informationIcon")).
                                                                getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH ));
-                
+
         private static Icon _warnIcon = new ImageIcon(Utils.iconToImage(UIManager.getIcon("OptionPane.warningIcon")).
                                                                getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH ));
     }
--- a/java/src/IceGridGUI/LiveDeployment/MetricsViewEditor.java
+++ b/java/src/IceGridGUI/LiveDeployment/MetricsViewEditor.java
@@ -142,8 +142,8 @@
     //
     public static class ButtonRenderer extends DefaultTableCellRenderer
     {
-        @Override public Component 
-        getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean hasFocus, int row, 
+        @Override public Component
+        getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean hasFocus, int row,
                                       int column)
         {
             if(value == null)
@@ -161,10 +161,10 @@
                 button.setForeground(table.getForeground());
                 button.setBackground(UIManager.getColor("Button.background"));
             }
-            return button;  
+            return button;
         }
     }
-    
+
     //
     // This class allow to render a number with a format
     //
@@ -181,13 +181,13 @@
                                       int row, int column)
         {
             if(value != null)
-            { 
-                setText(_format.format(Double.parseDouble(value.toString()))); 
-            } 
+            {
+                setText(_format.format(Double.parseDouble(value.toString())));
+            }
             else
-            { 
-                setText(""); 
-            } 
+            {
+                setText("");
+            }
             this.setHorizontalAlignment(RIGHT);
 
             if(isSelected)
@@ -200,10 +200,10 @@
                 setForeground(table.getForeground());
                 setBackground(table.getBackground());
             }
-            return this; 
+            return this;
         }
-        
-        private final DecimalFormat _format; 
+
+        private final DecimalFormat _format;
     }
 
     //
@@ -216,11 +216,11 @@
             _table = table;
         }
 
-        @Override public void 
+        @Override public void
         mouseClicked(MouseEvent e)
         {
             int column = _table.getColumnModel().getColumnIndexAtX(e.getX());
-            int row = e.getY() / _table.getRowHeight(); 
+            int row = e.getY() / _table.getRowHeight();
 
             if(row < _table.getRowCount() && row >= 0 && column < _table.getColumnCount() && column >= 0)
             {
@@ -247,7 +247,7 @@
             //
             // If selected node is a MetricsView and it is enabled; start the refresh thread.
             //
-            if(e.isAddedPath() && e.getPath().getLastPathComponent() instanceof MetricsView && 
+            if(e.isAddedPath() && e.getPath().getLastPathComponent() instanceof MetricsView &&
                ((MetricsView )e.getPath().getLastPathComponent()).isEnabled())
             {
                 MetricsViewEditor.startRefreshThread((MetricsView)e.getPath().getLastPathComponent());
@@ -566,7 +566,7 @@
             {
                 try
                 {
-                    _flavor = new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType +  
+                    _flavor = new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType +
                                              ";class=\"" + MetricsViewTransferableData.class.getName() + "\"");
                 }
                 catch(ClassNotFoundException ex)
@@ -589,7 +589,7 @@
         int[] selectedRows = table.getSelectedRows();
         int[] selectedColumns = table.getSelectedColumns();
         Map<String, List<MetricsCell>> rows = new HashMap<String, List<MetricsCell>>();
-        
+
         if(selectedRows.length > 0 && selectedColumns.length > 0)
         {
             TableModel model = (TableModel)table.getModel();
@@ -615,7 +615,7 @@
                        columnClass.equals(float.class) || columnClass.equals(Float.class) ||
                        columnClass.equals(double.class) || columnClass.equals(Double.class))
                     {
-                        cells.add(new MetricsCell(id, field.createField()));                        
+                        cells.add(new MetricsCell(id, field.createField()));
                     }
                 }
                 if(cells.size() > 0)
@@ -648,7 +648,7 @@
             JTable table = (JTable)component;
             TableModel model = (TableModel)table.getModel();
             Map<String, List<MetricsCell>> rows = getSelectedRows(table, true);
-                
+
             if(rows.size() > 0)
             {
                 return new Transferable(new MetricsViewTransferableData(
@@ -873,13 +873,13 @@
         }
     }
 
-    private static MetricsField createField(MetricsView node, String prefix, String mapName, String name, 
+    private static MetricsField createField(MetricsView node, String prefix, String mapName, String name,
                                             Field objectField, MetricsFieldContext context)
     {
         String className = _properties.getPropertyWithDefault(
                                                     prefix + ".fieldClass",
                                                     "IceGridGUI.LiveDeployment.MetricsViewEditor$DeclaredMetricsField");
-        
+
         Class<?> cls = IceInternal.Util.findClass(className, null);
         if(cls == null)
         {
@@ -888,7 +888,7 @@
         }
         try
         {
-            java.lang.reflect.Constructor<?> ctor = cls.getDeclaredConstructor(MetricsView.class, String.class, 
+            java.lang.reflect.Constructor<?> ctor = cls.getDeclaredConstructor(MetricsView.class, String.class,
                                                                                String.class, String.class, Field.class);
             MetricsField field = (MetricsField)ctor.newInstance(node, prefix, mapName, name, objectField);
             field.setContext(context);
@@ -910,7 +910,7 @@
 
                 String setterName = propEntry.getKey().substring(propEntry.getKey().lastIndexOf(".") + 1);
                 setterName = "set" + Character.toUpperCase(setterName.charAt(0)) + setterName.substring(1);
-                
+
                 try
                 {
                     java.lang.reflect.Method setter = cls.getMethod(setterName, new Class[]{String.class});
@@ -1037,7 +1037,7 @@
         super.buildPropertiesPanel();
         _propertiesPanel.setName("Metrics Report");
     }
-    
+
     public static class TableModel extends DefaultTableModel
     {
         public TableModel(String metricsName)
@@ -1109,7 +1109,7 @@
 
     private static RefreshThread _refreshThread;
     private Map<String, JTable> _tables = new HashMap<String, JTable>();
-    
+
 
     static class ColumnInfo
     {
@@ -1371,9 +1371,9 @@
             else
             {
                 return (float)(((m2.totalLifetime - m1.totalLifetime) / _scaleFactor) /
-                                (m2.total - m1.total) - (m2.current - m1.current)); 
+                                (m2.total - m1.total) - (m2.current - m1.current));
             }
-        } 
+        }
 
             private double _scaleFactor = 1.0d;
             private String _columnName;
@@ -1458,7 +1458,7 @@
             d2.timestamp =  timestamp;
 
             _deltas.put(m.id, d2);
-            
+
             if(d1 == null)
             {
                 //
@@ -1537,7 +1537,7 @@
                             model.addColumn("Type");
                             model.addColumn("Identity");
                             final JTable table = new JTable(model);
-                            
+
                             //
                             // Adjust row height for larger fonts
                             //
@@ -1633,7 +1633,7 @@
                                                                         Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                             getMetricsNode().fetchMetricsFailures(getMetricsName(), m.id, cb);
 
-                            JOptionPane.showMessageDialog(getMetricsNode().getCoordinator().getMainFrame(), scrollPane, 
+                            JOptionPane.showMessageDialog(getMetricsNode().getCoordinator().getMainFrame(), scrollPane,
                                                           "Metrics Failures", JOptionPane.PLAIN_MESSAGE);
                             getMetricsNode().getCoordinator().getMainFrame().setCursor(
                                                                     Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
@@ -1694,8 +1694,8 @@
                                     {
                                     }
                                     MetricsField field = MetricsViewEditor.createField(getMetricsNode(),
-                                                                                       prefix + "." + name, 
-                                                                                       getFieldName(), name, 
+                                                                                       prefix + "." + name,
+                                                                                       getFieldName(), name,
                                                                                        objectField,
                                                                                        getContext());
                                     if(field != null)
@@ -1728,7 +1728,7 @@
                                     };
                                 table.addMouseListener(new ButtonMouseListener(table));
                                 table.setAutoCreateRowSorter(true);
-                                
+
                                 //
                                 // Adjust row height for larger fonts
                                 //
@@ -1738,7 +1738,7 @@
                                 {
                                     table.setRowHeight(minRowHeight);
                                 }
-                                
+
                                 for(Map.Entry<Integer, MetricsField> fieldEntry : model.getMetricFields().entrySet())
                                 {
                                     if(fieldEntry.getValue().getCellRenderer() != null)
@@ -1748,7 +1748,7 @@
                                     }
                                 }
 
-                                int idColumn = table.getColumnModel().getColumnIndex(_properties.getProperty(prefix + 
+                                int idColumn = table.getColumnModel().getColumnIndex(_properties.getProperty(prefix +
                                                                                                      ".id.columnName"));
 
                                 for(IceMX.Metrics m : objects)
@@ -1758,7 +1758,7 @@
 
                                 JScrollPane scrollPane = new JScrollPane(table);
                                 scrollPane.setPreferredSize(new Dimension(800, 600));
-                                JOptionPane.showMessageDialog(getMetricsNode().getCoordinator().getMainFrame(), 
+                                JOptionPane.showMessageDialog(getMetricsNode().getCoordinator().getMainFrame(),
                                                               scrollPane, getColumnName(), JOptionPane.PLAIN_MESSAGE);
 
                             }
@@ -1786,4 +1786,3 @@
     private static TreePath _selectedPath;
     final private Preferences _prefs;
 }
-
--- a/java/build.xml
+++ b/java/build.xml
@@ -834,7 +834,7 @@
 
             <!-- Customize jar manifest (optional) -->
             <manifest>
-                <attribute name="Class-Path" value="../resources/"/>
+                <!-- <attribute name="Class-Path" value="../resources/"/> -->
             </manifest>
         </fx:jar>
 
