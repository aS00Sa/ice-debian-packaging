Description: patch [1 of 2] to fix the build with ruby2.2
Origin: https://github.com/zeroc-ice/ice/commit/5bd52c249b9cb99125d38a1060dcf160c2ca0b91
Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=791848
From 5bd52c249b9cb99125d38a1060dcf160c2ca0b91 Mon Sep 17 00:00:00 2001
From: Jose <jose@zeroc.com>
Date: Mon, 9 Feb 2015 20:20:50 +0100
Subject: Fixed (ICE-6288) - Ruby extension does not compile with Ruby 2.2.0
Last-Updated: 2015-11-21

---
 rb/src/IceRuby/Config.h | 81 +++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 81 insertions(+)

diff --git a/rb/src/IceRuby/Config.h b/rb/src/IceRuby/Config.h
index d0649dd..f7b0bef 100644
--- a/rb/src/IceRuby/Config.h
+++ b/rb/src/IceRuby/Config.h
@@ -36,6 +36,87 @@
 
 
 #include <ruby.h>
+#include <ruby/version.h>
+
+#if defined(RUBY_API_VERSION_CODE) && RUBY_API_VERSION_CODE >= 20200
+//
+// Since ruby 2.2.0 the macros to convert Bignum to long are 
+// not public. We define here our own version.
+//
+# ifndef BDIGIT
+#  if SIZEOF_INT*2 <= SIZEOF_LONG_LONG
+#   define BDIGIT unsigned int
+#   define SIZEOF_BDIGIT SIZEOF_INT
+#   define BDIGIT_DBL unsigned LONG_LONG
+#  elif SIZEOF_INT*2 <= SIZEOF_LONG
+#   define BDIGIT unsigned int
+#   define SIZEOF_BDIGIT SIZEOF_INT
+#   define BDIGIT_DBL unsigned long
+#  elif SIZEOF_SHORT*2 <= SIZEOF_LONG
+#   define BDIGIT unsigned short
+#   define SIZEOF_BDIGIT SIZEOF_SHORT
+#   define BDIGIT_DBL unsigned long
+#  else
+#   define BDIGIT unsigned short
+#   define SIZEOF_BDIGIT (SIZEOF_LONG/2)
+#   define SIZEOF_ACTUAL_BDIGIT SIZEOF_LONG
+#   define BDIGIT_DBL unsigned long
+#  endif
+# endif
+# ifndef SIZEOF_ACTUAL_BDIGIT
+#  define SIZEOF_ACTUAL_BDIGIT SIZEOF_BDIGIT
+# endif
+
+# define BIGNUM_EMBED_LEN_NUMBITS 3
+# ifndef BIGNUM_EMBED_LEN_MAX
+#  if (SIZEOF_VALUE*3/SIZEOF_ACTUAL_BDIGIT) < (1 << BIGNUM_EMBED_LEN_NUMBITS)-1
+#    define BIGNUM_EMBED_LEN_MAX (SIZEOF_VALUE*3/SIZEOF_ACTUAL_BDIGIT)
+#  else
+#    define BIGNUM_EMBED_LEN_MAX ((1 << BIGNUM_EMBED_LEN_NUMBITS)-1)
+#  endif
+# endif
+
+struct RBignum {
+    struct RBasic basic;
+    union {
+        struct {
+            size_t len;
+            BDIGIT *digits;
+        } heap;
+        BDIGIT ary[BIGNUM_EMBED_LEN_MAX];
+    } as;
+};
+
+# define BIGNUM_SIGN_BIT FL_USER1
+/* sign: positive:1, negative:0 */
+# define BIGNUM_SIGN(b) ((RBASIC(b)->flags & BIGNUM_SIGN_BIT) != 0)
+# define BIGNUM_SET_SIGN(b,sign) \
+  ((sign) ? (RBASIC(b)->flags |= BIGNUM_SIGN_BIT) \
+          : (RBASIC(b)->flags &= ~BIGNUM_SIGN_BIT))
+# define BIGNUM_POSITIVE_P(b) BIGNUM_SIGN(b)
+# define BIGNUM_NEGATIVE_P(b) (!BIGNUM_SIGN(b))
+
+# define BIGNUM_EMBED_FLAG FL_USER2
+# define BIGNUM_EMBED_LEN_MASK (FL_USER5|FL_USER4|FL_USER3)
+# define BIGNUM_EMBED_LEN_SHIFT (FL_USHIFT+BIGNUM_EMBED_LEN_NUMBITS)
+# define BIGNUM_LEN(b) \
+    ((RBASIC(b)->flags & BIGNUM_EMBED_FLAG) ? \
+     (long)((RBASIC(b)->flags >> BIGNUM_EMBED_LEN_SHIFT) & \
+            (BIGNUM_EMBED_LEN_MASK >> BIGNUM_EMBED_LEN_SHIFT)) : \
+     RBIGNUM(b)->as.heap.len)
+/* LSB:BIGNUM_DIGITS(b)[0], MSB:BIGNUM_DIGITS(b)[BIGNUM_LEN(b)-1] */
+# define BIGNUM_DIGITS(b) \
+    ((RBASIC(b)->flags & BIGNUM_EMBED_FLAG) ? \
+     RBIGNUM(b)->as.ary : \
+     RBIGNUM(b)->as.heap.digits)
+# define BIGNUM_LENINT(b) rb_long2int(BIGNUM_LEN(b))
+
+# define RBIGNUM(obj) (R_CAST(RBignum)(obj))
+
+# define RBIGNUM_LEN(v) BIGNUM_LEN(v)
+# define RBIGNUM_DIGITS(v) BIGNUM_DIGITS(v)
+# define SIZEOF_BDIGITS SIZEOF_BDIGIT
+#endif
 
 //
 // The Ruby header file win32/win32.h defines a number of macros for
-- 
2.6.2

